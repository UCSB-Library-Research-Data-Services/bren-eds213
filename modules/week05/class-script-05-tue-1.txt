Recap from last session

VIEWS are live data, if you change any table the VIEW reports on, the VIEW will update automatically (like a function you rerun every time you query it)
  -- How to list all the views in DuckDB: SELECT view_name FROM duckdb_views;

I/O:
- How to import data into a database
  -- Define table schema including data types and constraints
  -- Add Primary key
  -- Add any foreign keys
  -- Copy data: COPY Snow_cover FROM "../ASDN_csv/snow_survey_fixed.csv" (header TRUE, nullstr "NA"); 

- Update data: (!Alert danger!)
  -- You can do real damage to your data!!
  -- Strategies: (a) Start with SELECT then switch to UPDATE, (b) Create a TMP table and test your code on it
  

How to export a database

-- Exporting the entire database, including schema!! This is a DuckDB feature though
   EXPORT DATABASE 'export_adsn'; 
   
-- Export an entire table
   COPY Species TO 'output.csv' (HEADER, DELIMITER ',');
   
-- Export a specific query
   COPY (SELECT * FROM Species) TO 'species_db.csv' (HEADER, DELIMITER ',');

Managing Data

-- inserting data
SELECT * FROM Species;
.maxrows 8
INSERT INTO Species VALUES ('abcd', 'thing', 'scientific name', NULL);
SELECT * FROM Species;
-- you can explicitly label the columns
INSERT INTO Species (Common_name, Scientific_name, Code, Relevance)
  VALUES ('thing 2', 'another scientific name', 'efgh', NULL);
-- take advantage of default values
INSERT INTO Species (Common_name, Code) VALUES ('thing 3', 'ijkl');
SELECT * FROM Species;
.nullvalue -NULL-
-- UPDATE and DELETE
UPDATE Species SET Relevance = 'not sure yet' WHERE Relevance IS NULL;
SELECT * FROM Species;
DELETE FROM Species WHERE Relevance = 'not sure yet';
SELECT * FROM Species;
-- safe delete practice #1
SELECT * FROM Species WHERE Relevance = 'Study species';
-- after confirming, then edit the statement
DELETE FROM Species WHERE Relevance = 'Study species';
-- incomplete statement
-- leave of "DELETE", then add it after visual confirmation
DELETE FROM Species WHERE ....